{"version":3,"sources":["components/Button.js","services/person-service.js","components/Persons.js","components/PersonForm.js","components/Filter.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Button","onClick","text","baseUrl","getAll","a","axios","get","res","data","addContact","newPerson","post","updateNumber","id","put","deleteContact","delete","Persons","persons","setPersons","setOutputMsg","clearOutputMsg","deletePerson","person","window","confirm","name","personService","filter","p","message","success","console","error","map","key","number","PersonForm","setNewPerson","getNewId","ids","testId","includes","updatePerson","oldPerson","find","personObj","concat","addPerson","event","preventDefault","undefined","newId","onSubmit","value","onChange","target","type","Filter","filterVal","setFilterVal","Notification","className","App","useState","outputMsg","setTimeout","fetchAll","useEffect","personsToShow","toLowerCase","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.2a503af6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// Button component\r\nconst Button = ({ onClick, text }) => (\r\n  <button onClick={onClick}>{text}</button>\r\n)\r\n\r\nexport default Button","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = async () => {\r\n  const res = await axios.get(baseUrl)\r\n  return res.data\r\n}\r\n\r\nconst addContact = async (newPerson) => {\r\n  const res = await axios.post(baseUrl, newPerson)\r\n  return res.data\r\n}\r\n\r\nconst updateNumber = async (id, newPerson) => {\r\n  const res = await axios.put(`${baseUrl}/${id}`, newPerson)\r\n  return res.data\r\n}\r\n\r\nconst deleteContact = async (id) => {\r\n  const res = await axios.delete(`${baseUrl}/${id}`)\r\n  return res.data\r\n}\r\n\r\nexport default {\r\n  getAll,\r\n  addContact,\r\n  deleteContact,\r\n  updateNumber\r\n}","import React from 'react'\r\nimport Button from './Button'\r\nimport personService from '../services/person-service'\r\n\r\nconst Persons = ({persons, setPersons, setOutputMsg, clearOutputMsg}) => {\r\n\r\n  const deletePerson = async (person) => {\r\n    const userConfirmedDelete = window.confirm(`Delete ${person.name}?`)\r\n    if (! userConfirmedDelete) {\r\n      return\r\n    }\r\n    try {\r\n      await personService.deleteContact(person.id)\r\n      setPersons(persons.filter(p => p.id !== person.id))\r\n      setOutputMsg({message: `Contact ${person.name} deleted.`, success: true})\r\n      clearOutputMsg()\r\n    } catch (err) {\r\n      console.error(err)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    {persons.map(person => \r\n      <p key={person.id}>{person.name} {person.number} <Button text={'delete'} onClick={ () => deletePerson(person) } /></p>\r\n    )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\nimport personService from '../services/person-service'\r\n\r\nconst PersonForm = ({persons, setPersons, newPerson, setNewPerson, setOutputMsg, clearOutputMsg}) => {\r\n  \r\n  const getNewId = (ids) => {\r\n    let testId = 1\r\n    while (true) {\r\n      if ( !ids.includes(testId) ) break\r\n      testId++\r\n    }\r\n    return testId\r\n  }\r\n\r\n  const updatePerson = async (persons, newPerson) => {\r\n    // confirm update with user\r\n    const userConfirmedUpdate = window.confirm(`${newPerson.name} is already saved in contacts. Replace old number with new one?`)\r\n    // stop if user cancels\r\n    if (! userConfirmedUpdate) {\r\n      return\r\n    }\r\n    const oldPerson = persons.find(p => p.name === newPerson.name)  // Grab old contact\r\n    const personObj = { ...oldPerson, number: newPerson.number }  // create copy with updated number\r\n    try {\r\n      await personService.updateNumber(oldPerson.id, personObj)  // update contact in backend\r\n      setPersons( persons.filter(p => p.id !== oldPerson.id).concat(personObj) ) // set contacts by filtering out old person obj and concat new person obj\r\n      setOutputMsg({message: `Contact ${newPerson.name} successfully updated.`, success: true})\r\n      clearOutputMsg()\r\n      setNewPerson({name: '', number: ''})  // reset input boxes\r\n    } catch (err) {\r\n      console.error(err)\r\n      setOutputMsg({message: `Contact ${newPerson.name} could not be updated.`, success: false})\r\n      clearOutputMsg()\r\n    }\r\n  }\r\n\r\n  const addPerson = async (event) => {\r\n    event.preventDefault()\r\n    // Alert if no name or number entered\r\n    if (newPerson.name === undefined || newPerson.name === '' || newPerson.number === undefined || newPerson.number === '') {\r\n      setOutputMsg({message: `Please fill out form before submitting.`, success: false})\r\n      clearOutputMsg()\r\n    }\r\n    // update person's number if name is already stored\r\n    else if ( persons.map(p => p.name).includes(newPerson.name) ) {\r\n      updatePerson(persons, newPerson)\r\n    }\r\n    // Otherwise add new contact to backend\r\n    else {\r\n      const newId = getNewId(persons.map(p => p.id))\r\n      const personObj = {\r\n        name: newPerson.name,\r\n        number: newPerson.number,\r\n        id: newId\r\n      }\r\n      try {\r\n        await personService.addContact(personObj)\r\n        setPersons(persons.concat(personObj))\r\n        setOutputMsg({message: `Contact ${newPerson.name} successfully added.`, success: true})\r\n        clearOutputMsg()\r\n        setNewPerson({name: '', number: ''})\r\n      } catch (err) {\r\n        console.error(err)\r\n        setOutputMsg({message: `Contact ${newPerson.name} could not be added.`, success: false})\r\n        clearOutputMsg()\r\n      }\r\n    }\r\n  }\r\n  \r\n\r\n\r\n  const handleNameChange = (event) => {\r\n    setNewPerson({...newPerson, name: event.target.value})\r\n  }\r\n  const handleNumberChange = (event) => {\r\n    setNewPerson({...newPerson, number: event.target.value})\r\n  }\r\n  \r\n  return (\r\n    <form onSubmit={addPerson}>\r\n    <div>\r\n      <div>Name: <input value={newPerson.name} onChange={handleNameChange} /></div>\r\n      <div>Number: <input value={newPerson.number} onChange={handleNumberChange} /></div>\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">add</button>\r\n    </div>\r\n  </form>\r\n  )\r\n}\r\n\r\nexport default PersonForm;","import React from 'react'\r\n\r\n\r\nconst Filter = ({filterVal, setFilterVal}) => {\r\n\r\n  const handleFilterChange = ({target}) => setFilterVal(target.value)\r\n\r\n  return(\r\n    <form><div><em>Filter by name:</em> <input value={filterVal} onChange={handleFilterChange} /></div></form>\r\n  )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst Notification = ({data}) => {\r\n\r\n  if (data.success === null) {\r\n    return null\r\n  }\r\n\r\n  const className = data.success ? 'success' : 'error'\r\n\r\n  return (\r\n    <div className={'notification ' + className}>\r\n      {data.message}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Filter from \"./components/Filter\"\nimport personService from './services/person-service'\nimport Notification from './components/Notification'\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newPerson, setNewPerson ] = useState('')\n  const [filterVal, setFilterVal] = useState('')\n  const [outputMsg, setOutputMsg] = useState({message: null, success: null})\n\n  const clearOutputMsg = () => {\n    setTimeout(() => {\n      setOutputMsg({message: '', success: null})\n    }, 4000)\n  }\n\n  const fetchAll = async () => {\n    setPersons(await personService.getAll())\n  }\n  \n  // Use effect hook to fetch initial data from server\n  useEffect(() => {\n    fetchAll()\n  }, [])\n\n  // Filter persons based on filter input box value (unless value is empty string)\n  const personsToShow = filterVal === '' ? persons :\n    persons.filter(p => \n      p.name.toLowerCase().includes(filterVal.toLowerCase())\n  )\n\n  return (\n    <div className='App'>\n      <h1>Phonebook</h1>\n      \n      <h4>Add New Contact</h4>\n      \n      <PersonForm\n        newPerson={newPerson}\n        setNewPerson={setNewPerson}\n        setPersons={setPersons}\n        persons={persons}\n        setOutputMsg={setOutputMsg}\n        clearOutputMsg={clearOutputMsg}\n      />\n      \n      <Notification data={outputMsg}/>\n\n      <h4>Contacts List</h4>\n      \n      <Filter\n        filterVal={filterVal}\n        setFilterVal={setFilterVal}\n      />\n      \n      <Persons\n        persons={personsToShow}\n        setPersons={setPersons}\n        setOutputMsg={setOutputMsg}\n        clearOutputMsg={clearOutputMsg}\n      />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}